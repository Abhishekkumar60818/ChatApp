@inject IHttpContextAccessor httpContextAccessor
@model List<ChatApp.Models.User>

@{
    ViewData["Title"] = "Chat";
    string ProfileImage = httpContextAccessor.HttpContext.Session.GetString("UserImage");
    var Userid = httpContextAccessor.HttpContext.Session.GetInt32("UserId");
    string uName = httpContextAccessor.HttpContext.Session.GetString("uName");
}

<div class="my-5 bg-white p-0 container rounded">
    <div class="row no-gutters">
        <!-- Sidebar -->
        <div class="col-md-4 border-end">
            <div class="p-3 bg-light d-flex justify-content-between align-items-center rounded-top">
                <div class="dropdown">
                    <img class="rounded-circle dropdown-toggle"
                         src="@ProfileImage"
                         alt="User Image"
                         width="50"
                         height="50"
                         data-bs-toggle="dropdown"
                         aria-expanded="false">
                    <span>@uName</span>
                    <ul class="dropdown-menu dropdown-menu-end">
                        @if (Userid != null)
                        {
                            <li>
                                <a class="dropdown-item text-danger" href="#" onclick="logout()">
                                    Logout
                                </a>
                            </li>
                        }
                        else
                        {
                            <li>
                                <a class="dropdown-item text-primary" asp-action="Login" asp-controller="User">
                                    Login
                                </a>
                            </li>
                        }
                    </ul>
                </div>

                <div>
                    <i class="bi bi-arrow-repeat mx-2 fs-4 text-secondary"></i>
                    <i class="bi bi-chat-dots mx-2 fs-4 text-secondary"></i>
                    <i class="bi bi-list mx-2 fs-4 text-secondary"></i>
                </div>
            </div>

            <div class="p-3">
                <!-- Search Form -->
                <form method="get" asp-action="Index" class="mb-4">
                    <div class="input-group">
                        <span class="input-group-text bg-white border-0">
                            <i class="bi bi-search text-muted"></i>
                        </span>
                        <input type="text" name="searchQuery" class="form-control border-0 shadow-none"
                               placeholder="Search by name"
                               value="@ViewBag.SearchQuery">
                    </div>
                </form>
            </div>

            <div class="list-group">
                @if (Model == null || !Model.Any())
                {
                    <div class="list-group-item text-muted text-center">
                        No available user data.
                    </div>
                }
                else
                {
                    @foreach (var user in Model)
                    {
                        if (Userid != user.Id)
                        {
                            <a asp-route-id="@user.Id"
                               class="list-group-item list-group-item-action d-flex align-items-center"
                               data-id="@user.Id"
                               data-name="@user.Name"
                               data-profile="@(!string.IsNullOrEmpty(user.ProfileImagePath) ? user.ProfileImagePath : "https://via.placeholder.com/60")"
                               data-about="Additional info about @user.Name"
                               onclick="updateChatPanel(this, event)">
                                <img class="rounded-circle"
                                     src="@(!string.IsNullOrEmpty(user.ProfileImagePath) ? user.ProfileImagePath : "https://via.placeholder.com/60")"
                                     alt="User Image"
                                     width="50"
                                     height="50"
                                     style="object-fit: cover;">
                                <div class="ms-3 flex-grow-1">
                                    <h6 class="mb-1">@user.Name</h6>
                                    <p class="text-muted mb-0 small">Additional info about user</p>
                                </div>
                                <span class="text-muted small">Timestamp</span>
                            </a>
                        }
                    }
                }
            </div>
        </div>

        <!-- Chat Panel -->
        <div class="col-md-8">
            <div id="chat-panel-header" class="p-3 bg-light d-flex justify-content-between align-items-center border-bottom">
            </div>
            <div id="chat-messages" class="p-3" style="height: 400px; overflow-y: auto;">
                <!-- Chat messages will be dynamically added here -->
            </div>

            <div class="input-group p-3 bg-light">
                <span class="input-group-text bg-white border-0">
                    <i class="bi bi-emoji-smile text-muted"></i>
                </span>
                <input id="sndmessage" type="text" class="form-control border-0 shadow-none" placeholder="Type your message here...">
                <button onclick="sendMessage()" class="btn btn-white border-0">
                    <i class="bi bi-mic text-muted"></i>Send
                </button>
                <button class="btn btn-white border-0">
                    <i class="bi bi-send text-muted"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- SignalR Script -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
<script>
    // SignalR connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    // Start the SignalR connection
    connection.start().catch(err => console.error(err.toString()));

    // Handle received messages
    connection.on("ReceiveMessage", (senderId, message) => {
        const chatContainer = document.getElementById("chat-messages");
        const isSender = senderId === '@Userid';

        const messageElement = document.createElement('div');
        messageElement.className = isSender ? 'd-flex justify-content-end mb-3' : 'd-flex mb-3';
        messageElement.innerHTML = `
            <div class="${isSender ? 'bg-primary text-white' : 'bg-light'} p-2 rounded-pill">
                ${message}
            </div>
        `;
        chatContainer.appendChild(messageElement);
        chatContainer.scrollTop = chatContainer.scrollHeight; // Scroll to bottom
    });

    // Function to update the chat panel when a user is selected
    async function updateChatPanel(userElement, event) {
        event.preventDefault();

        const userId = '@Userid'; // Inject the Userid value from Razor
        if (!userId) {
            alert("Please log in to start a chat.");
            return;
        }

        const selectedUserId = userElement.getAttribute("data-id");
        const userName = userElement.getAttribute("data-name");
        const userProfile = userElement.getAttribute("data-profile");

        // Save the selected user ID to local storage
        localStorage.setItem("selectedUserId", selectedUserId);
        localStorage.setItem("selectedUserName", userName);
        localStorage.setItem("selectedUserProfile", userProfile);

        // Update chat header
        const chatHeader = document.getElementById("chat-panel-header");
        chatHeader.innerHTML = `
            <div class="d-flex align-items-center">
                <img class="rounded-circle" src="${userProfile}" alt="" width="50" height="50">
                <div class="ms-3">
                    <h6 class="mb-1">${userName}</h6>
                    <p class="text-muted small mb-0">Chatting now</p>
                </div>
            </div>
        `;

        const allUsers = document.querySelectorAll('.list-group-item');
        allUsers.forEach(item => item.classList.remove('active'));
        userElement.classList.add('active');

        // Fetch chat history
        try {
            const response = await fetch(`/Chat/GetChatMessages?userId=${userId}&otherUserId=${selectedUserId}`);
            if (!response.ok) throw new Error("Failed to fetch messages.");

            const messages = await response.json();
            const chatContainer = document.getElementById("chat-messages");
            chatContainer.innerHTML = '';

            messages.forEach(msg => {
                const messageElement = document.createElement('div');
                messageElement.className = msg.isSender ? 'd-flex justify-content-end mb-3' : 'd-flex mb-3';
                messageElement.innerHTML = `
                    <div class="${msg.isSender ? 'bg-primary text-white' : 'bg-light'} p-2 rounded-pill">
                        ${msg.message}
                    </div>
                `;
                chatContainer.appendChild(messageElement);
            });

            chatContainer.scrollTop = chatContainer.scrollHeight; // Scroll to bottom
        } catch (error) {
            console.error('Error fetching messages:', error);
        }
    }

    // Function to send a message
    async function sendMessage() {
        const userId = '@Userid';
        const messageInput = document.getElementById('sndmessage');
        const message = messageInput.value.trim();

        if (!message) {
            alert("Message cannot be empty.");
            return;
        }

        const selectedUserId = document.querySelector('.list-group-item.active')?.getAttribute('data-id');
        if (!selectedUserId) {
            alert("Please select a user to chat with.");
            return;
        }

        const chat = {
            SenderId: parseInt(userId),
            ReceiverId: parseInt(selectedUserId),
            Message: message
        };

        try {
            const response = await fetch('/Chat/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(chat)
            });

            if (response.ok) {
                messageInput.value = ''; // Clear input

                // Add the message to the chat panel immediately
                const chatContainer = document.getElementById("chat-messages");
                const messageElement = document.createElement('div');
                messageElement.className = 'd-flex justify-content-end mb-3'; // Sender's message is always on the right
                messageElement.innerHTML = `
                    <div class="bg-primary text-white p-2 rounded-pill">
                        ${message}
                    </div>
                `;
                chatContainer.appendChild(messageElement);
                chatContainer.scrollTop = chatContainer.scrollHeight; // Scroll to bottom
            } else {
                alert("Failed to send message.");
            }
        } catch (error) {
            console.error('Error sending message:', error);
        }
    }

    // Restore selected user on page load
    document.addEventListener("DOMContentLoaded", function () {
        const selectedUserId = localStorage.getItem("selectedUserId");
        const selectedUserName = localStorage.getItem("selectedUserName");
        const selectedUserProfile = localStorage.getItem("selectedUserProfile");

        if (selectedUserId && selectedUserName && selectedUserProfile) {
            // Find the user element in the list and trigger the chat panel update
            const userElement = document.querySelector(`.list-group-item[data-id="${selectedUserId}"]`);
            if (userElement) {
                updateChatPanel(userElement, new Event("click"));
            }
        }
    });

    // Logout function to clear local storage
    function logout() {
        localStorage.removeItem("selectedUserId");
        localStorage.removeItem("selectedUserName");
        localStorage.removeItem("selectedUserProfile");
        window.location.href = "/User/Logout"; // Redirect to logout action
    }
</script>